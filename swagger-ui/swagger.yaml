openapi: 3.0.3
info:
  title: Информационный портал - OpenAPI 3.0
  description: |-
    На этой странице описано backend-API информационного портала.

    Последнее изменение: 24.09.2023
    
    Известные учётные записи системы:
    - Администратор[administrator: adminadmin]
    - Тестовые учётки обычных пользователей [логин заканчивается на test_N, пароль 8 единиц: 11111111]

    *Известные проблемы, которые можно пофикситить, а можно и не фиксить, т.к. проект учебный всё равно, никому вроде бы и не нужно:*

    1. Некоторые методы возвращают хэш от пароля клиента (он там совсем не нужен, это небезопасно).
    2. При аггрегации комментов желательно подтягивать логины комментаторов (там пока просто ID возвращается).
    3. Желательно добавить в mongo схемы поле _id, т.к. без такого явно объявленного поля невозможны методы mongoose типа findById и т.д. Короче, есть разница между _id и id.
    4. Желательно описать в swagger все используемые перечисления, т.к. для перечисляемых типов бэк возвращает number, который нужно распознавать в соответствии с перечислением.
    5. Сделать честное хранилище файлов в файловой системе. Потому что неэтично заставлять пользователя подтягивать данные с чужих сайтов. Можно легко сделать для изображений, для целых постов задача усложняется. Пока что не сделано.

    Некоторые полезные ссылки:
    - [Сайт информационного портала](http://77.222.60.117/)
    - [Репозиторий с исходным кодом сервера](https://github.com/Koffian/InfoPortal)
  version: 1.0.0 
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: Авторизация
    description: Вход в учётную запись / регистрация / выход
  - name: Посты
    description: Работа с постами
  - name: Пользователи
    description: Работа с учётными данными пользователей
  - name: Тэги
    description: Просмотр и модификация тегов
  - name: Комментарии
    description: Просмотр и редактирование комментариев
  - name: Карма
    description: Методы добавления кармы и отслеживания действий, связанных с ней
  - name: Пинг
    description: Проверка свзязи
paths:
  /:
    get:
      tags:
        - Пинг
      description: Получить респонс от API. Если метод не работает, возможны проблемы с CROSS-ORIGIN и проч сетевыми настройками.
      summary: Получить респонс от API. Если метод не работает, то API недоступно
      parameters:
        - name: arbitraryQuery
          in: query
          description: Тестирование query
          schema:
            type: string
            default: queryExample
            example: "queryExample"
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: string
  /users/find:
    get:
      tags: 
        - Пользователи
      description: Найти пользователей системы по логину (краткая информация)
      summary: Найти пользователей системы по логину (краткая информация)
      parameters:
        - name: username
          in: query
          description: Поиск по логину
          schema:
            type: string
            default: null
            example: "Ivanov1984"
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/UserCard'
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
      security:
        - portalAuth: []
  /users/{id}:
    get:
      tags:
        - Пользователи
      description: Получить информацию о пользователе через id
      summary: Получить информацию о пользователе через id
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
        
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
                schema:
                  type: object
                  $ref: '#components/schemas/User'
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
      security:
        - portalAuth: []
    put:
      tags:
        - Пользователи
      description: Обновить информацию о пользователе
      summary: Обновить информацию о пользователе
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      requestBody:
        required: true
        description: Значения полей, которые пользователь хочет обновить. Некоторые поля невозможно изменить (например, дату создания поста)
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "NewUsername_ForIvanov1984"
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/User'
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
      security:
        - portalAuth: []
    delete:
      tags:
        - Пользователи
      description: Удалить пользователя (может только админ, модератор не может. (добавить модератора?))
      summary: Удалить пользователя (может только админ, модератор не может, пока что. (добавить?))
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/User'
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
      security:
        - portalAuth: []
  /users:
    get:
      tags:
        - Пользователи
      description: Получить информацию о пользователе через username
      summary: Получить информацию о пользователе через username
      parameters:
        - name: username
          required: true
          in: query
          description: username пользователя
          schema:
            type: string
            default: "Ivanov1984"
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
                schema:
                  type: object
                  $ref: '#components/schemas/User'
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/API_ErrorResponse"
      security:
        - portalAuth: []

  /posts:
    get:
      tags:
        - Посты
      summary: Получить список постов с заданными параметрами
      description: Получить весь список постов
      parameters:
        - name: titleQuery
          in: query
          description: Запрос поиска по заголовку поста
          schema:
            type: string
            default: null
            example: Введение в
        - name: page
          in: query
          description: Номер страницы для пагинации
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Число постов на странице
          schema:
            type: integer
            default: 10
        - name: order_by
          in: query
          description: Сортировать по
          schema:
            type: string
            $ref: "#/components/schemas/SortingMethod"
        - name: karma_lowest_limit
          in: query
          description: Минимальная карма для отображения (если defined)
          schema:
            type: integer
            format: int64
            default: null
            example: -50
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                  properties:
                    id: 
                      type: number
                      description: Идентификатор пользователя, на которого подписан текущий пользователя
  /posts/{id}:
    get:
      tags:
        - Посты
      description: Получить пост по **ID**
      summary: Получить тело поста с заданным ID
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                  properties:
                    id: 
                      type: number
                      description: Идентификатор пользователя, на которого подписан текущий пользователя
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#components/schemas/API_ErrorResponse"
                example:
                  "0"
    put:
      tags:
        - Посты
      description:  Модифицировать запись о посте с заданным **ID**
      summary: Модифицировать запись о посте с заданным ID
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      requestBody:
        required: true
        description: Значения полей, которые пользователь хочет обновить. Некоторые поля невозможно изменить (например, дату создания поста)
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Ivanov1984"
                password:
                  type: string
                  example: "IvanovTheBestPassword-1337"
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                  properties:
                    id: 
                      type: number
                      description: Идентификатор пользователя, на которого подписан текущий пользователя
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#components/schemas/API_ErrorResponse"
                example:
                  "0"
    delete:
      tags:
        - Посты
      description: Удалить пост с заданным **ID** (ADMIN only)
      summary: Удалить пост с заданным ID (ADMIN only)
      security:
        - portalAuth: []
      parameters:
        - $ref: "#/components/parameters/postIdPathParam"
          description: ID удаляемого элемента
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                  properties:
                    id: 
                      type: number
                      description: Идентификатор пользователя, на которого подписан текущий пользователя
        '400':
          description: Недостаточно доступа
          content:
            application/json:
              schema:
                type: object
                $ref: "#components/schemas/API_ErrorResponse"
                example:
                  "0"
        '403':
          description: Проблема авторизации
          content:
            application/json:
              schema:
                type: object
                $ref: "#components/schemas/API_ErrorResponse"
                example:
                  "0"
  /posts/upload:
    post:
      tags:
        - Посты
      summary: Загрузить новый пост в систему
      description: Создаёт новый пост согласно заданным параметрам
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/PostCreationExample"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации

  /auth/login:
    post:
      tags:
        - Авторизация
      summary: Авторизация в системе через логин / пароль (незахешированный)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Ivanov1984"
                password:
                  type: string
                  example: "IvanovTheBestPassword-1337"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
          
  /auth/registration:
    post:
      tags:
        - Авторизация
      summary: Регистрация нового пользователя в системе
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Ivanov1984"
                password:
                  type: string
                  example: "IvanovTheBestPassword-1337"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
  /tags:
    get:
      tags:
      - Тэги 
      summary: Поиск тегов по названию
      parameters:
        - name: name
          in: query
          description: Встречающиеся символы в названиях тега
          schema:
            type: string
            default: null
            example: "Веб-разработка"
        - name: searchLimit
          in: query
          description: Вернуть первые N найденных
          schema:
            type: string
            default: 10
            example: 20
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
    post:
      tags:
      - Тэги 
      summary: Добавить новый тег [доступ Модератор/Администратор]
      description: Добавить новый тег [доступ Модератор/Администратор]
      parameters:
        - name: name
          in: query
          description: Название нового тега
          schema:
            type: string
            default: null
            example: "Веб-разработка"
          required: true
        - name: description
          in: query
          description: Вернуть первые N найденных
          schema:
            type: string
            default: null
            example: Всё, что прямо/косвенно относится к в веб разработке
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
  /tags/{id}:
    get:
      tags:
      - Тэги 
      summary: Получение тега по ID
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации

    put:
      tags:
      - Тэги 
      summary: Обновление информации о теге [Админ/модератор]
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
        - name: name
          in: query
          description: Новое название для обновляемого тега
          schema:
            type: string
            default: null
            example: "Веб-разработка"
        - name: description
          in: query
          description: Новое описание для обновляемого тега
          schema:
            type: string
            default: null
            example: Всё, что прямо/косвенно относится к в веб разработке
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
    delete:
      tags:
      - Тэги 
      summary: Удаление тега [Админ/модератор]
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
  /tags/push/{id}:
    post:
      tags:
        - Тэги
      summary: Привязать существующий тэг к элементу (к посту, пока что нет других элементов с тегами)
      parameters:
        - name: id
          in: path
          description: ID элемента, к которому добавляется тэг (path параметр)
          schema:
            type: string
            default: null
          required: true
        - name: tagID
          in: query
          description: ID добавляемого существующего тега
          schema:
            type: string
            default: null
          required: true
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
  /tags/pop/{id}:
    post:
      tags:
        - Тэги
      summary: Отвязать тэг от элемента (от поста, пока что нет других элементов с тегами)
      parameters:
        - name: id
          in: path
          description: ID поста, у которого удаляется тег (path параметр)
          schema:
            type: string
            default: null
          required: true
        - name: tagID
          in: query
          description: ID тега, открепляемого от элемента (должен быть связан с элементом)
          schema:
            type: string
            default: null
          required: true
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
  /comments/{id}:
    get:
      tags:
      - Комментарии
      summary: Получить информацию о комментарии
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема 
    post:
      tags:
      - Комментарии
      summary: Оставить комментарий к посту/другому комментарию
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      requestBody:
        required: true
        description: "Тело комментария. Массив различного контента, где каждый элемент это {код элемента + Data.Mixed}"
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: object
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема 
    put:
      tags:
        - Комментарии
      summary: Отредактировать комментарий. После редактирования установится флаг wasEdited = true
      description: Отредактировать комментарий. После редактирования установится флаг wasEdited = true, который нельзя будет сбросить обратно.
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема 
    delete:
      tags:
      - Комментарии
      summary: Удалить комментарий (удалить свой/ удалить чужой через админа/модератора)
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема 
  /comments/aggregate/{id}:
    get:
      tags:
      - Комментарии
      summary: Собрать список комментариев для данной цели (пост/другой коммент)
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
  /karma/rate/{id}:
    put:
      tags:
        - "Карма"
      summary: Добавить/убрать карму к посту/комментарию. (самолайк можно, пока что)
      parameters:
        - $ref: "#/components/parameters/elementIdPathParam"
        - name: ratingMethod
          in: query
          description: Действие оценивания (лайк/дизлайк/снять оценку)
          schema:
            type: string
            $ref: "#/components/schemas/KarmaRatingMethod"
          required: true
      responses:
        '200':
          description: Успешная операция
        '400':
          description: Недостаточно доступа
        '403':
          description: Проблема авторизации
components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
        - access
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          description: Юзернейм пользователя портала. Используется для авторизации.
          example: administrator
        password:
          type: string
          description: Пароль пользователя (В БД хранится в захешированном виде)
          example: 1111 как дефолтный пароль
        access:
          type: integer
          description: Статус/уровень доступа пользователя (пользователь/админ/модератор/забанен)
          format: int32
          example: 0
        bannedUntil:
          type: string
          description: Дата, до которой действует бан на пользователя
          example: 2023-08-04T12:14:21.569+00:00
        mutedUntil:
          type: string
          description: Дата, до которой действует мут пользователя
          example: 2023-08-04T12:14:21.569+00:00
        subscribedTo:
          type: array
          items:
            properties:
              id: 
                type: number
                description: Идентификатор пользователя, на которого подписан текущий пользователя
        postCreatedList:
          type: array
          description: Массив идентификаторов созданных постов
          items:
            properties:
              id: 
                type: number
                description: Идентификатор созданного поста пользователем
      xml:
        name: user
    UserCard:
      type: object
      required:
        - username
        - id
      description: Урезанная информация о пользователе для более удобного отображения
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          description: Юзернейм пользователя портала. Используется для авторизации.
          example: administrator
        access:
          type: integer
          description: Статус/уровень доступа пользователя (пользователь/админ/модератор/забанен)
          format: int32
          example: 0
      xml:
        name: user
    Post:
      description: Пост, написанный пользователем портала.
      type: object
      required:
        - title
        - type
        - format
        - createdBy
        - body
      properties:
        title:
          type: string
          description: Главный заголовок поста
          example: "Введение в создание постов"
        type:
          type: number
          description: Тип публикации (статья/новость) (по объёму содержимого)
          example: 2
        format:
          type: number
          description: Формат поста (характеристика по типу содержимого)
          example: "Digest, Roadmap, Research и т.д."
        createdBy:
          type: number
          description: Id автора
          example: 64cceb9e9e5d777f647732e9
        body:
          type: array
          description: "Массив элеменов, формирующих тело поста"
          items:
            properties:
              type:
                type: number
                description: "Тип элемента поста"
                example: "0 - Заголовок, 1 - цитата, список, параграф, изображение и т.д."
              content:
                type: string
                description: "Тело элемента в виде строки(пока что)????"
                example: <iframe frameborder="0" width="400" height="200" src="http://commondatastorage.googleapis.com/codeskulptor-demos/DDR_assets/Sevish_-__nbsp_.mp3"> </iframe>
        creationDate:
          type: string
          description: Дата создания поста. Устанавливается автоматически системой.
          example: 2023-08-04T12:14:21.569+00:00
        modifyDate:
          type: string
          description: Дата последнего обновления поста. Устанавливается автоматически системой.
          example: 2023-08-04T12:14:21.569+00:00
        tags:
          type: array
          items:
            properties:
              id:
                type: number
                description: Id связанного тега
                example: 64cceb9e9e5d777f647732eb
        comments:
          type: array
          items:
            properties:
              id:
                type: number
                description: Id Комментариев
                example: 64cceb9e9e5d777f647732eb
        karmaCounter:
          type: number
          format: int64
          description: "Счётчик кармы (знаковое целое число)"
          default: 0
          example: -3
        isRestricted:
          type: boolean
          description: "Флаг бана поста (или ограничения на модерацию)"
          default: false
          example: true
    Tag:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Рабочее название тега
          example: "Веб-разработка"
        description:
          type: string
          description: Описание тега в двух словах
          example: "Всё, что относится к веб разработке"
      xml:
        name: tag
    API_ErrorResponse:
      type: object
      required:
        - errorCode
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          description: Целочисленный код ошибки
        decodedError:
          $ref: "#/components/schemas/ErrorName"
          
          description: Название ошибки
        description:
          type: string
          description: Подробности ошибки
      enum:
        - s
    ErrorCode:
      type: integer
      format: int64
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
    ErrorName:
      type: string
      enum:
        - "NotFound"
        - "InternalError"
        - "InsufficientAccess"
        - "DeletedOrMoved"
        - "WrongPassword"
        - "AlreadyExists"
    SortingMethod:
      type: string
      enum:
        - "karma_descending"
        - "karma_ascending"
        - "new_first"
        - "old_first"
    KarmaRatingMethod:
      type: string
      enum:
        - "like"
        - "dislike"
        - "reset"
  parameters:
    elementIdPathParam:
      name: id
      in: path
      description: ID элемента
      required: true
      schema:
        type: string
        minLength: 24
        maxLength: 24
        example: 64dcd283ae9f52b020922f45
    postIdPathParam:
      name: id
      in: path
      description: ID поста
      required: true
      schema:
        type: string
        minLength: 24
        maxLength: 24
        example: 64dcd283ae9f52b020922f45
    postIdQueryParam:
      name: id
      in: query
      description: ID поста
      required: true
      schema:
        type: string
        minLength: 24
        maxLength: 24
      example: 64dcd283ae9f52b020922f45
  requestBodies:
    UserArray:
      description: Массив пользователей
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    PostCreationExample:
      description: Пример создания поста
      content:
        application/json: 
            schema:
              type: object
              required:
                - title
                - type
              properties:
                title:
                  type: string
                  description: Главный заголовок поста
                  example: Подходящий заголовок к посту
                type:
                  type: integer
                  description: Код типа публикации

  securitySchemes:
    portalAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - portalAuth: []

